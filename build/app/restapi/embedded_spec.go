// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "VMware PowerCLI Environment",
    "title": "vmware-powercli",
    "version": "1.0",
    "x-direktiv-meta": {
      "categories": [
        "build",
        "development"
      ],
      "container": "gcr.io/direktiv/functions/vmware-powercli",
      "issues": "https://github.com/direktiv-apps/vmware-powercli/issues",
      "license": "[Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)",
      "long-description": "This function has Powershell Core and VMware PowerCLI resources. Built by Nathan Coad originally, modified by Direktiv team for production deployment.\nThe following versions have been included in the build:\n - VMware-PowerCLI-13.0.0-20829139\n - Microsoft Powershell-7.3\n\nWe pass in several environment variables to the powershell script to enable scripts to make use of Direktiv secrets for credentials. These are available as follows: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eEnvironment Variable\u003c/th\u003e \u003cth\u003eDirektiv parameter\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003eVCENTER_USER\u003c/td\u003e \u003ctd\u003eusername\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eVCENTER_PASSWORD\u003c/td\u003e \u003ctd\u003epassword\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eVCENTER\u003c/td\u003e \u003ctd\u003evcenter\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e",
      "maintainer": "[direktiv.io](https://www.direktiv.io)",
      "url": "https://github.com/direktiv-apps/vmware-powercli"
    }
  },
  "paths": {
    "/": {
      "post": {
        "parameters": [
          {
            "type": "string",
            "default": "development",
            "description": "direktiv action id is an UUID. \nFor development it can be set to 'development'\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          },
          {
            "type": "string",
            "default": "/tmp",
            "description": "direktiv temp dir is the working directory for that request\nFor development it can be set to e.g. '/tmp'\n",
            "name": "Direktiv-TempDir",
            "in": "header"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "commands": {
                  "description": "Array of commands.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "command": {
                        "description": "Command to run",
                        "type": "string",
                        "example": "Get-VM -Name jq(.vm) | ConvertTo-Json -Depth 1 -AsArray"
                      },
                      "continue": {
                        "description": "Stops excecution if command fails, otherwise proceeds with next command",
                        "type": "boolean",
                        "default": true
                      },
                      "envs": {
                        "description": "Environment variables set for each command.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the variable.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value of the variable.",
                              "type": "string"
                            }
                          }
                        },
                        "example": [
                          {
                            "name": "MYVALUE",
                            "value": "hello"
                          }
                        ]
                      },
                      "print": {
                        "description": "If set to false the command will not print the full command with arguments to logs.",
                        "type": "boolean",
                        "default": true
                      },
                      "silent": {
                        "description": "If set to false the command will not print output to logs.",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                "files": {
                  "description": "File to create before running commands.",
                  "type": "array",
                  "default": null,
                  "items": {
                    "$ref": "#/definitions/direktivFile"
                  }
                },
                "password": {
                  "description": "Password for authenticating to vCenter",
                  "type": "string",
                  "example": "SecretPassword"
                },
                "username": {
                  "description": "Username for authenticating to vCenter",
                  "type": "string",
                  "example": "user@domain.com"
                },
                "vcenter": {
                  "description": "FQDN of the vCenter this workflow will connect to",
                  "type": "string",
                  "example": "vcsa.example.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of executed Powershell commands.",
            "schema": {
              "type": "object",
              "properties": {
                "vmware-powercli": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "success",
                      "result"
                    ],
                    "properties": {
                      "result": {
                        "additionalProperties": false
                      },
                      "success": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "vmware-powercli": {
                "result": [
                  {
                    "Name": "file1.txt"
                  },
                  {
                    "Name": "file2.txt"
                  }
                ],
                "success": true
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Direktiv-ErrorCode": {
                "type": "string"
              },
              "Direktiv-ErrorMessage": {
                "type": "string"
              }
            }
          }
        },
        "x-direktiv": {
          "cmds": [
            {
              "action": null,
              "exec": "pwsh -Command Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:0",
              "print": false,
              "silent": true
            },
            {
              "action": null,
              "exec": "pwsh -Command Connect-VIServer -Server \"{{ .Body.Vcenter }}\" -User \"{{ .Body.Username }}\" -Password \"{{ .Body.Password }}\"",
              "print": false,
              "silent": true
            },
            {
              "action": "foreach",
              "continue": "{{ .Item.Continue }}",
              "env": [
                "VCENTER_USER={{ .Body.Username }}",
                "VCENTER_PASSWORD={{ .Body.Password }}",
                "VCENTER={{ .Body.Vcenter }}"
              ],
              "exec": "{{ .Item.Command }}",
              "loop": ".Commands",
              "print": "{{ .Item.Print }}",
              "runtime-envs": "[\n{{- range $index, $element := .Item.Envs }}\n{{- if $index}},{{- end}}\n\"{{ $element.Name }}={{ $element.Value }}\"\n{{- end }}\n]\n",
              "silent": "{{ .Item.Silent }}"
            }
          ],
          "output": "{\n  \"vmware-powercli\": {{ index . 2 | toJson }}\n}\n"
        },
        "x-direktiv-errors": {
          "io.direktiv.command.error": "Command execution failed",
          "io.direktiv.output.error": "Template error for output generation of the service",
          "io.direktiv.ri.error": "Can not create information object from request"
        },
        "x-direktiv-examples": [
          {
            "content": "- id: vmware-powercli \n  type: action\n  action:\n    function: vmware-powercli\n    secrets: [\"vcenterUser\", \"vCenterPass\", \"vCenterName\"]\n    input:\n      username: jq(.secrets.vCenterUser)\n      password: jq(.secrets.vCenterPass)\n      vcenter: jq(.secrets.vCenterName)                 \n      files:\n      - name: script.ps1\n        data: |\n          Get-ChildItem . | Select Name | ConvertTo-Json \n      commands:\n      - command: pwsh script.ps1",
            "title": "Run small script directly"
          },
          {
            "content": "- id: vmware-powercli \n  type: action\n  action:\n    function: vmware-powercli\n    secrets: [\"vcenterUser\", \"vCenterPass\", \"vCenterName\"]\n    input: \n      username: jq(.secrets.vCenterUser)\n      password: jq(.secrets.vCenterPass)\n      vcenter: jq(.secrets.vCenterName)\n      commands:\n      - command: pwsh -Command \"Get-VM -Name jq(.vm) | ConvertTo-Json -Depth 1 -AsArray\"",
            "title": "Run command directly"
          }
        ],
        "x-direktiv-function": "functions:\n- id: vmware-powercli\n  image: gcr.io/direktiv/functions/vmware-powercli:1.0\n  type: knative-workflow\n  size: large"
      },
      "delete": {
        "parameters": [
          {
            "type": "string",
            "description": "On cancel Direktiv sends a DELETE request to\nthe action with id in the header\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-direktiv": {
          "cancel": "echo 'cancel {{ .DirektivActionID }}'"
        }
      }
    }
  },
  "definitions": {
    "direktivFile": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "github.com/direktiv/apps/go/pkg/apps"
        },
        "type": "DirektivFile"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "VMware PowerCLI Environment",
    "title": "vmware-powercli",
    "version": "1.0",
    "x-direktiv-meta": {
      "categories": [
        "build",
        "development"
      ],
      "container": "gcr.io/direktiv/functions/vmware-powercli",
      "issues": "https://github.com/direktiv-apps/vmware-powercli/issues",
      "license": "[Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)",
      "long-description": "This function has Powershell Core and VMware PowerCLI resources. Built by Nathan Coad originally, modified by Direktiv team for production deployment.\nThe following versions have been included in the build:\n - VMware-PowerCLI-13.0.0-20829139\n - Microsoft Powershell-7.3\n\nWe pass in several environment variables to the powershell script to enable scripts to make use of Direktiv secrets for credentials. These are available as follows: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eEnvironment Variable\u003c/th\u003e \u003cth\u003eDirektiv parameter\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003eVCENTER_USER\u003c/td\u003e \u003ctd\u003eusername\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eVCENTER_PASSWORD\u003c/td\u003e \u003ctd\u003epassword\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eVCENTER\u003c/td\u003e \u003ctd\u003evcenter\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e",
      "maintainer": "[direktiv.io](https://www.direktiv.io)",
      "url": "https://github.com/direktiv-apps/vmware-powercli"
    }
  },
  "paths": {
    "/": {
      "post": {
        "parameters": [
          {
            "type": "string",
            "default": "development",
            "description": "direktiv action id is an UUID. \nFor development it can be set to 'development'\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          },
          {
            "type": "string",
            "default": "/tmp",
            "description": "direktiv temp dir is the working directory for that request\nFor development it can be set to e.g. '/tmp'\n",
            "name": "Direktiv-TempDir",
            "in": "header"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/postParamsBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of executed Powershell commands.",
            "schema": {
              "$ref": "#/definitions/postOKBody"
            },
            "examples": {
              "vmware-powercli": {
                "result": [
                  {
                    "Name": "file1.txt"
                  },
                  {
                    "Name": "file2.txt"
                  }
                ],
                "success": true
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Direktiv-ErrorCode": {
                "type": "string"
              },
              "Direktiv-ErrorMessage": {
                "type": "string"
              }
            }
          }
        },
        "x-direktiv": {
          "cmds": [
            {
              "action": null,
              "exec": "pwsh -Command Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:0",
              "print": false,
              "silent": true
            },
            {
              "action": null,
              "exec": "pwsh -Command Connect-VIServer -Server \"{{ .Body.Vcenter }}\" -User \"{{ .Body.Username }}\" -Password \"{{ .Body.Password }}\"",
              "print": false,
              "silent": true
            },
            {
              "action": "foreach",
              "continue": "{{ .Item.Continue }}",
              "env": [
                "VCENTER_USER={{ .Body.Username }}",
                "VCENTER_PASSWORD={{ .Body.Password }}",
                "VCENTER={{ .Body.Vcenter }}"
              ],
              "exec": "{{ .Item.Command }}",
              "loop": ".Commands",
              "print": "{{ .Item.Print }}",
              "runtime-envs": "[\n{{- range $index, $element := .Item.Envs }}\n{{- if $index}},{{- end}}\n\"{{ $element.Name }}={{ $element.Value }}\"\n{{- end }}\n]\n",
              "silent": "{{ .Item.Silent }}"
            }
          ],
          "output": "{\n  \"vmware-powercli\": {{ index . 2 | toJson }}\n}\n"
        },
        "x-direktiv-errors": {
          "io.direktiv.command.error": "Command execution failed",
          "io.direktiv.output.error": "Template error for output generation of the service",
          "io.direktiv.ri.error": "Can not create information object from request"
        },
        "x-direktiv-examples": [
          {
            "content": "- id: vmware-powercli \n  type: action\n  action:\n    function: vmware-powercli\n    secrets: [\"vcenterUser\", \"vCenterPass\", \"vCenterName\"]\n    input:\n      username: jq(.secrets.vCenterUser)\n      password: jq(.secrets.vCenterPass)\n      vcenter: jq(.secrets.vCenterName)                 \n      files:\n      - name: script.ps1\n        data: |\n          Get-ChildItem . | Select Name | ConvertTo-Json \n      commands:\n      - command: pwsh script.ps1",
            "title": "Run small script directly"
          },
          {
            "content": "- id: vmware-powercli \n  type: action\n  action:\n    function: vmware-powercli\n    secrets: [\"vcenterUser\", \"vCenterPass\", \"vCenterName\"]\n    input: \n      username: jq(.secrets.vCenterUser)\n      password: jq(.secrets.vCenterPass)\n      vcenter: jq(.secrets.vCenterName)\n      commands:\n      - command: pwsh -Command \"Get-VM -Name jq(.vm) | ConvertTo-Json -Depth 1 -AsArray\"",
            "title": "Run command directly"
          }
        ],
        "x-direktiv-function": "functions:\n- id: vmware-powercli\n  image: gcr.io/direktiv/functions/vmware-powercli:1.0\n  type: knative-workflow\n  size: large"
      },
      "delete": {
        "parameters": [
          {
            "type": "string",
            "description": "On cancel Direktiv sends a DELETE request to\nthe action with id in the header\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-direktiv": {
          "cancel": "echo 'cancel {{ .DirektivActionID }}'"
        }
      }
    }
  },
  "definitions": {
    "direktivFile": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "github.com/direktiv/apps/go/pkg/apps"
        },
        "type": "DirektivFile"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "postOKBody": {
      "type": "object",
      "properties": {
        "vmware-powercli": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/postOKBodyVmwarePowercliItems"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "postOKBodyVmwarePowercliItems": {
      "type": "object",
      "required": [
        "success",
        "result"
      ],
      "properties": {
        "result": {
          "additionalProperties": false
        },
        "success": {
          "type": "boolean"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postParamsBody": {
      "type": "object",
      "properties": {
        "commands": {
          "description": "Array of commands.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/postParamsBodyCommandsItems"
          }
        },
        "files": {
          "description": "File to create before running commands.",
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/definitions/direktivFile"
          }
        },
        "password": {
          "description": "Password for authenticating to vCenter",
          "type": "string",
          "example": "SecretPassword"
        },
        "username": {
          "description": "Username for authenticating to vCenter",
          "type": "string",
          "example": "user@domain.com"
        },
        "vcenter": {
          "description": "FQDN of the vCenter this workflow will connect to",
          "type": "string",
          "example": "vcsa.example.com"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postParamsBodyCommandsItems": {
      "type": "object",
      "properties": {
        "command": {
          "description": "Command to run",
          "type": "string",
          "example": "Get-VM -Name jq(.vm) | ConvertTo-Json -Depth 1 -AsArray"
        },
        "continue": {
          "description": "Stops excecution if command fails, otherwise proceeds with next command",
          "type": "boolean",
          "default": true
        },
        "envs": {
          "description": "Environment variables set for each command.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/postParamsBodyCommandsItemsEnvsItems"
          },
          "example": [
            {
              "name": "MYVALUE",
              "value": "hello"
            }
          ]
        },
        "print": {
          "description": "If set to false the command will not print the full command with arguments to logs.",
          "type": "boolean",
          "default": true
        },
        "silent": {
          "description": "If set to false the command will not print output to logs.",
          "type": "boolean",
          "default": false
        }
      },
      "x-go-gen-location": "operations"
    },
    "postParamsBodyCommandsItemsEnvsItems": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the variable.",
          "type": "string"
        },
        "value": {
          "description": "Value of the variable.",
          "type": "string"
        }
      },
      "x-go-gen-location": "operations"
    }
  }
}`))
}
